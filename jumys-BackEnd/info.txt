
 ||  : NODE JS INSTALLATION :  ||

- npm init   OR   npm init-y

- npm i nodemon 

- npm i express 

- npm i mongoose

- npm i dotenv 

- npm i jsonwebtoken

- npm i bcrypt 

- npm i morgan

- npm i multer


- run command  - npm run dev


- API's 

 ||  : login page : ||

- || Admin || 

- registerAdmin -  http://localhost:7410/api/admin/login/register-admin

- loginAdmin - http://localhost:7410/api/admin/login/login-admin

- getUser - http://localhost:7410/api/admin/login/get-admin

- getAllUsers - http://localhost:7410/api/admin/login/get-all-admin

- updateUser - http://localhost:7410/api/admin/login/update-admin

- deleteUser - http://localhost:7410/api/admin/login/delete-admin

- logout admin - http://localhost:7410/api/admin/login/logout-admin

- update password - http://localhost:7410/api/admin/login/update-password


- || User || 

- registerUser -  http://localhost:7410/api/user/login/register

- loginUser - http://localhost:7410/api/user/login/login-user

- getUser - http://localhost:7410/api/user/login/get-user

- getAllUsers - http://localhost:7410/api/user/login/get-all-user

- updateUser - http://localhost:7410/api/user/login/update-user

- updatePassword - http://localhost:7410/api/user/login/update-password

- deleteUser - http://localhost:7410/api/user/login/delete-user

- logoutUser - http://localhost:7410/api/user/login/logout-user

- getmail - http://localhost:7410/api/user/email/sendm


- || Product ||

- addProduct - http://localhost:7410/api/admin/product/add-product

- For email validation 

  email: {
        type: String,
        unique: true,
        required: true,
        match: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.(com)$/,  // Regex to validate email ending with .com
        message: 'Email must end with .com'
    },

- Fot hide password in login 

  exports.loginUser = async(req, res) => {
    try {
        let user = await userService.getUser({ email: req.body.email, isDelete: false});
        console.log(user);
        if(!user){
            return res.status(400).json({ message: `Email Not Found...`});
        }
        let checkPassword = await bcrypt.compare(req.body.password, user.password);
        if (!checkPassword) {
            return res.status(401).json({ message: `Password Not Match...`});
        }
        user.password = undefined;
        let token = jwt.sign({ userId: user._id}, 'User');
        console.log(token);
        res.status(200).json({user,token, message: `User Login SuccesFully..`})
    } catch (error) {
        console.log(error);
        res.status(500).json({message: `Internal Server Error...`})
    }
};
